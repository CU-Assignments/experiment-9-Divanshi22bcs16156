// hibernate.cfg.xml
<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE hibernate-configuration PUBLIC 
    "-//Hibernate/Hibernate Configuration DTD 3.0//EN" 
    "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">

<hibernate-configuration>
    <session-factory>
        <property name="hibernate.dialect">org.hibernate.dialect.MySQL8Dialect</property>
        <property name="hibernate.connection.driver_class">com.mysql.cj.jdbc.Driver</property>
        <property name="hibernate.connection.url">jdbc:mysql://localhost:3306/bankdb</property>
        <property name="hibernate.connection.username">root</property>
        <property name="hibernate.connection.password">yourpassword</property>
        <property name="hibernate.hbm2ddl.auto">update</property>
        <property name="show_sql">true</property>

        <mapping class="com.example.banking.entity.Account"/>
        <mapping class="com.example.banking.entity.TransactionRecord"/>
    </session-factory>
</hibernate-configuration>
//AppConfig.java
package com.example.banking.config;

import org.springframework.context.annotation.*;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.orm.hibernate5.*;
import org.hibernate.SessionFactory;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

import javax.sql.DataSource;

@Configuration
@ComponentScan(basePackages = "com.example.banking")
@EnableTransactionManagement
public class AppConfig {

    @Bean
    public DataSource dataSource() {
        DriverManagerDataSource ds = new DriverManagerDataSource();
        ds.setDriverClassName("com.mysql.cj.jdbc.Driver");
        ds.setUrl("jdbc:mysql://localhost:3306/bankdb");
        ds.setUsername("root");
        ds.setPassword("yourpassword");
        return ds;
    }

    @Bean
    public LocalSessionFactoryBean sessionFactory() {
        LocalSessionFactoryBean sfb = new LocalSessionFactoryBean();
        sfb.setDataSource(dataSource());
        sfb.setPackagesToScan("com.example.banking.entity");
        sfb.setHibernateProperties(new java.util.Properties() {{
            put("hibernate.dialect", "org.hibernate.dialect.MySQL8Dialect");
            put("hibernate.show_sql", "true");
            put("hibernate.hbm2ddl.auto", "update");
        }});
        return sfb;
    }

    @Bean
    public HibernateTransactionManager transactionManager(SessionFactory sessionFactory) {
        return new HibernateTransactionManager(sessionFactory);
    }
}
//Account.java
package com.example.banking.entity;

import jakarta.persistence.*;

@Entity
public class Account {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    private String owner;
    private double balance;

    public Account() {}

    public Account(String owner, double balance) {
        this.owner = owner;
        this.balance = balance;
    }

    public int getId() { return id; }

    public String getOwner() { return owner; }

    public double getBalance() { return balance; }

    public void setBalance(double balance) { this.balance = balance; }

    @Override
    public String toString() {
        return "Account{id=" + id + ", owner='" + owner + "', balance=" + balance + "}";
    }
}
//TransactionRecord.java
package com.example.banking.entity;

import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
public class TransactionRecord {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    private int fromAccountId;
    private int toAccountId;
    private double amount;
    private LocalDateTime timestamp;

    public TransactionRecord() {}

    public TransactionRecord(int fromAccountId, int toAccountId, double amount) {
        this.fromAccountId = fromAccountId;
        this.toAccountId = toAccountId;
        this.amount = amount;
        this.timestamp = LocalDateTime.now();
    }

    public String toString() {
        return "Transaction[from=" + fromAccountId + ", to=" + toAccountId +
                ", amount=" + amount + ", at=" + timestamp + "]";
    }
}
//AccountDAO.java
package com.example.banking.dao;

import com.example.banking.entity.Account;
import com.example.banking.entity.TransactionRecord;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class AccountDAO {

    @Autowired
    private SessionFactory sessionFactory;

    public Account getAccount(int id) {
        return sessionFactory.getCurrentSession().get(Account.class, id);
    }

    public void updateAccount(Account account) {
        sessionFactory.getCurrentSession().update(account);
    }

    public void recordTransaction(TransactionRecord tx) {
        sessionFactory.getCurrentSession().save(tx);
    }

    public void createAccount(Account acc) {
        sessionFactory.getCurrentSession().save(acc);
    }
}
//BankService.java
package com.example.banking.service;

import com.example.banking.dao.AccountDAO;
import com.example.banking.entity.Account;
import com.example.banking.entity.TransactionRecord;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class BankService {

    @Autowired
    private AccountDAO dao;

    @Transactional
    public void transferMoney(int fromId, int toId, double amount) {
        Account from = dao.getAccount(fromId);
        Account to = dao.getAccount(toId);

        if (from.getBalance() < amount) {
            throw new RuntimeException("Insufficient funds in account: " + fromId);
        }

        from.setBalance(from.getBalance() - amount);
        to.setBalance(to.getBalance() + amount);

        dao.updateAccount(from);
        dao.updateAccount(to);

        dao.recordTransaction(new TransactionRecord(fromId, toId, amount));
    }

    @Transactional
    public void createSampleAccounts() {
        dao.createAccount(new Account("Divanshi", 1000));
        dao.createAccount(new Account("Alice", 1500));
    }
}
//MainApp.java
package com.example.banking;

import com.example.banking.config.AppConfig;
import com.example.banking.service.BankService;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class MainApp {
    public static void main(String[] args) {
        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);
        BankService service = context.getBean(BankService.class);

        try {
            service.createSampleAccounts();

            service.transferMoney(1, 2, 500); // Success
            service.transferMoney(1, 2, 2000); // Fail â†’ rollback

        } catch (Exception e) {
            System.out.println("Transaction failed: " + e.getMessage());
        }

        context.close();
    }
}


